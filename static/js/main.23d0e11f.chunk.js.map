{"version":3,"sources":["metamask/types.ts","metamask/containers/ConnectButton.tsx","components/InputField.tsx","App.tsx","polyjuice/hooks.ts","contracts/hooks.ts","reportWebVitals.ts","index.tsx"],"names":["MetamaskActions","ConnectButton","onConnect","buttonText","setButtonText","React","useState","isDisabled","setDisabled","accounts","setAccounts","onboarding","useRef","handleRequestAccount","connectedAccount","useEffect","current","MetaMaskOnboarding","console","log","isMetaMaskInstalled","length","stopOnboarding","window","ethereum","request","method","requestAccounts","then","on","accountsChanged","off","disabled","onClick","startOnboarding","InputField","label","onChange","value","placeholder","style","display","border","justifyContent","padding","event","Number","target","App","connectedAccountAddress","setConnectedAccountAddress","blockNumber","setBlockNumber","latestTransactionHash","setLatestTransactionHash","ckbBalance","setCkbBalance","tokenBalance","setTokenBalance","decimals","setDecimals","transferValue","setTransferValue","web3","setWeb3","options","timeout","clientConfig","maxReceivedFrameSize","maxReceivedMessageSize","keepalive","keepaliveInterval","reconnect","auto","delay","maxAttempts","onTimeout","provider","PolyjuiceWebsocketProvider","config","nervos","godwoken","wsUrl","rollupTypeHash","ethAccountLockCodeHash","web3Url","rpcUrl","setMultiAbi","ERC20_JSON","abi","Web3","useWeb3","ethers","setEthers","EthersPolyjuiceWebsocketProvider","useEthers","erc20","erc20Address","setERC20","eth","Contract","useERC20Contract","subscribe","async","error","result","number","getBlockNumber","address","balance","methods","balanceOf","call","utils","toNumber","listenBalance","getBalance","toBigInt","fetchCkbBalance","flexDirection","undefined","marginTop","marginBottom","toString","weiTransferValue","toBN","mul","pow","transactionHash","deposit","send","from","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.23d0e11f.chunk.js","sourcesContent":["export enum MetamaskActions {\n    requestAccounts = 'eth_requestAccounts',\n    requestWallet = 'wallet_requestPermissions',\n    watchAsset = 'wallet_watchAsset',\n    switchNetwork = 'wallet_switchEthereumChain',\n    accountsChanged = 'accountsChanged',\n  }\n  ","import MetaMaskOnboarding from '@metamask/onboarding';\nimport React from 'react';\n\nimport { MetamaskActions } from '../types'\n\nconst ONBOARD_TEXT = 'Click here to install MetaMask!';\nconst CONNECT_TEXT = 'Connect';\nconst CONNECTED_TEXT = 'Connected';\n\ninterface IConnectButtonProps {\n    onConnect: (connectedAccountAddress: string) => void\n}\n\nexport const ConnectButton: React.FC<IConnectButtonProps> = ({ onConnect }) => {\n    const [buttonText, setButtonText] = React.useState(ONBOARD_TEXT);\n    const [isDisabled, setDisabled] = React.useState(false);\n    const [accounts, setAccounts] = React.useState<string[]>([]);\n    const onboarding = React.useRef<MetaMaskOnboarding>();\n\n    const handleRequestAccount = (accounts: string[]) => {\n        const [connectedAccount] = accounts\n        setAccounts(accounts);\n\n        onConnect(connectedAccount)\n    }\n\n    React.useEffect(() => {\n        if (!onboarding.current) {\n            onboarding.current = new MetaMaskOnboarding();\n        }\n    }, []);\n\n    React.useEffect(() => {\n        console.log('effect')\n        if (MetaMaskOnboarding.isMetaMaskInstalled()) {\n            console.log('metamask installed')\n            if (accounts.length > 0) {\n                console.log('connect')\n                setButtonText(CONNECTED_TEXT);\n                setDisabled(true);\n                onboarding.current?.stopOnboarding();\n            } else {\n                console.log('connected')\n                setButtonText(CONNECT_TEXT);\n                setDisabled(false);\n            }\n        }\n    }, [accounts]);\n\n    React.useEffect(() => {\n        if (MetaMaskOnboarding.isMetaMaskInstalled()) {\n            window.ethereum\n                .request({ method: MetamaskActions.requestAccounts })\n                .then(handleRequestAccount);\n            window.ethereum.on(MetamaskActions.accountsChanged, handleRequestAccount);\n            return () => {\n                window.ethereum.off(MetamaskActions.accountsChanged, handleRequestAccount);\n            };\n        }\n    }, []);\n\n    const onClick = () => {\n        if (MetaMaskOnboarding.isMetaMaskInstalled()) {\n            window.ethereum\n                .request({ method: MetamaskActions.requestAccounts })\n                .then((accounts: string[]) => handleRequestAccount(accounts));\n        } else {\n            onboarding.current?.startOnboarding();\n        }\n    };\n\n    return (\n        <button disabled={isDisabled} onClick={onClick}>\n            {buttonText}\n        </button>\n    );\n}","import React from 'react';\n\n\ninterface IInputFieldProps {\n    label: string,\n    onChange: (value: number) => void\n    onClick: () =>  void\n    value: number\n    placeholder?: string\n}\n\nexport const InputField: React.FC<IInputFieldProps> = ({ label, onClick, onChange, value, placeholder }) => {\n\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const value = Number(event.target.value)\n        onChange(value)\n    }\n\n    return (\n        <div style={{ display: 'flex', border: '1px solid black', justifyContent: 'space-between',padding: 8 }}>\n            <input onChange={handleInputChange} value={value} placeholder={placeholder} />\n            <button onClick={onClick}>\n                {label}\n            </button>\n        </div>\n    );\n}","import React from 'react'\nimport { listenBlocks } from './contracts/hooks';\n\nimport { ConnectButton } from './metamask/containers/ConnectButton'\nimport { InputField } from './components/InputField'\nimport { useEthers, useWeb3 } from './polyjuice/hooks'\n\nimport Web3 from 'web3'\nimport { useERC20Contract } from './contracts/hooks'\n\nconst App: React.FC = () => {\n  const [connectedAccountAddress, setConnectedAccountAddress] = React.useState<string | null>(null);\n  const [blockNumber, setBlockNumber] = React.useState<number | null>(null);\n  const [latestTransactionHash, setLatestTransactionHash] = React.useState<string | null>(null)\n  const [ckbBalance, setCkbBalance] = React.useState<BigInt | null>(null);\n  const [tokenBalance, setTokenBalance] = React.useState<BigInt | null>(null);\n  const [decimals, setDecimals] = React.useState<number | null>(null);\n  const [transferValue, setTransferValue] = React.useState<number>(0)\n\n  const web3 = useWeb3(connectedAccountAddress)\n  const ethers = useEthers(connectedAccountAddress)\n\n  const wCKBAddress = '0x0815b0d4e58c8e707a85e774c37cab65480f66e9'\n  const erc20 = useERC20Contract(wCKBAddress, web3)\n\n  if (web3) {\n    web3.eth\n    .subscribe('newBlockHeaders', async (error, result) => {\n        if (!error) {\n          setBlockNumber(result.number)\n        } else {\n          console.error(error)\n        }\n    })\n  }\n\n  if (ethers) {\n    console.log('ethers', ethers)\n    ethers.on('block', (blockNumber: number) => {\n      console.log('ethers New Block from ethers:', blockNumber)\n    })\n  }\n\n  const deposit = async () => {\n    console.log('deposit')\n    if (decimals) {\n      const weiTransferValue = Web3.utils.toBN(transferValue).mul(Web3.utils.toBN(10).pow(Web3.utils.toBN(decimals)))\n      console.log('deposit amount', weiTransferValue.toString())\n      const transactionHash = await erc20?.methods.deposit().send({ from: connectedAccountAddress, value: weiTransferValue })\n      console.log('transaction hash', transactionHash)\n      setLatestTransactionHash(transactionHash)\n\n      const balance = await erc20?.methods\n        .balanceOf(connectedAccountAddress)\n        .call()\n      console.log('balance', balance)\n    }\n  }\n\n  React.useEffect(() => {\n    async function getBlockNumber() {\n      if(web3) {\n        const blockNumber = await web3.eth.getBlockNumber()\n\n        setBlockNumber(blockNumber)\n      }\n    }\n\n    getBlockNumber()\n  }, [web3])\n\n  React.useEffect(() => {\n    async function listenBalance() {\n      console.log('erc20', erc20?.options.address)\n      const balance = await erc20?.methods\n        .balanceOf(connectedAccountAddress)\n        .call()\n\n      const decimals = await erc20?.methods.decimals().call()\n      console.log('balance', balance)\n      console.log('decimals', decimals)\n\n      setTokenBalance(balance)\n      setDecimals(Web3.utils.toNumber(decimals))\n    }\n    console.log('erc20', erc20)\n\n    if (erc20) {\n      console.log('get balance')\n      listenBalance()\n    }\n  }, [erc20])\n\n  React.useEffect(() => {\n    async function fetchCkbBalance() {\n      if (ethers && connectedAccountAddress) {\n        const ckbBalance = await ethers?.getBalance(connectedAccountAddress);\n        console.log('fetchCkbBalance', ckbBalance);\n        setCkbBalance(ckbBalance.toBigInt());\n      }\n    }\n\n    fetchCkbBalance();\n  }, [connectedAccountAddress, ethers]);\n  \n  // React.useEffect(() => {\n  //   async function listenBalance() {\n  //     console.log('erc20', erc20?.options.address)\n  //     const balance = await erc20?.methods\n  //       .balanceOf(polyConnectedAccountAddress)\n  //       .call()\n\n  //     const decimals = await erc20?.methods.decimals().call()\n  //     console.log('balance', balance)\n  //     console.log('decimals', decimals)\n\n  //     setBalance(balance)\n  //     setDecimals(Web3.utils.toNumber(decimals))\n  //   }\n  //   console.log('erc20', erc20)\n\n  //   if (latestTransactionHash) {\n  //     console.log('get balance')\n  //     listenBalance()\n  //   }\n  // }, [latestTransactionHash])\n\n  React.useEffect(() => {\n    async function listenBalance() {\n      console.log('erc20', erc20?.options.address)\n      const balance = await erc20?.methods\n        .balanceOf(connectedAccountAddress)\n        .call()\n\n      const decimals = await erc20?.methods.decimals().call()\n      console.log('balance', balance)\n      console.log('decimals', decimals)\n\n      setTokenBalance(balance)\n      setDecimals(Web3.utils.toNumber(decimals))\n    }\n\n    if (blockNumber) {\n      listenBalance()\n    }\n  }, [blockNumber])\n  // listenBlocks(web3)\n\n  return (\n    <div style={{ display: 'flex'}}>\n      \n      <div style={{ display: 'flex', flexDirection: 'column'}}>\n      <h1>Wrapped CKB on Godwoken Testnet</h1>\n      <br/><br/>\n\n        <ConnectButton\n          onConnect={\n            (connectedAccountAddress) => {\n              console.log('on connect')\n              setConnectedAccountAddress(connectedAccountAddress)\n            }\n          }\n        />\n        <br/>\n        <div>\n          Account: {connectedAccountAddress ? connectedAccountAddress : undefined}\n        </div>\n        <div style={{ marginTop: 16, marginBottom: 16 }}>\n          Godwoken Testnet balances:\n          <div style={{ marginBottom: 8, marginTop: 8 }}>CKB Balance: {ckbBalance?.toString()} Shannons</div>\n          <div style={{ marginBottom: 8 }}>wCKB Balance: {tokenBalance} Shannons</div>\n          <InputField\n            label=\"Deposit CKB to get wCKB\"\n            value={transferValue}\n            onClick={deposit}\n            onChange={(value) => setTransferValue(value)}\n          />\n          The above value is in CKB unit (not in Shannons). Refresh the page after sending transaction.\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from 'react'\nimport { WebsocketProvider } from 'web3-providers-ws'\n\nimport { PolyjuiceWebsocketProvider } from \"@polyjuice-provider/web3\"\nimport { PolyjuiceWebsocketProvider as EthersPolyjuiceWebsocketProvider } from \"@polyjuice-provider/ethers\"\nimport config from \"../godwoken.config.json\"\nimport Web3 from 'web3'\nimport { providers } from 'ethers'\nimport ERC20_JSON from '../contracts/abi/ERC20.json'\n\nexport const useWeb3 = (connectedAccountAddress: string | null) => {\n    const [web3, setWeb3] = useState<Web3 | null>(null)\n\n    const options = {\n        timeout: 30000, // ms\n\n        clientConfig: {\n          // Useful if requests are large\n          maxReceivedFrameSize: 100000000,   // bytes - default: 1MiB\n          maxReceivedMessageSize: 100000000, // bytes - default: 8MiB\n    \n          // Useful to keep a connection alive\n          keepalive: true,\n          keepaliveInterval: 60000 // ms\n        },\n    \n        // Enable auto reconnection\n        reconnect: {\n            auto: true,\n            delay: 5000, // ms\n            maxAttempts: 5,\n            onTimeout: false\n        }\n    };\n\n    useEffect(() => {\n        if (connectedAccountAddress) {\n            const provider = new PolyjuiceWebsocketProvider(\n                config.nervos.godwoken.wsUrl, {\n                rollupTypeHash: config.nervos.rollupTypeHash,\n                ethAccountLockCodeHash: config.nervos.ethAccountLockCodeHash,\n                web3Url: config.nervos.godwoken.rpcUrl\n            }, options)\n\n            provider.setMultiAbi([ERC20_JSON.abi as any]);\n\n            const web3 = new Web3(provider as WebsocketProvider)\n            setWeb3(web3)\n        }\n    }, [connectedAccountAddress])\n\n    return web3\n}\n\nexport const useEthers = (connectedAccountAddress: string | null) => {\n    const [ethers, setEthers] = useState<providers.WebSocketProvider | null>(null)\n\n    const options = {\n        timeout: 30000, // ms\n\n        clientConfig: {\n          // Useful if requests are large\n          maxReceivedFrameSize: 100000000,   // bytes - default: 1MiB\n          maxReceivedMessageSize: 100000000, // bytes - default: 8MiB\n    \n          // Useful to keep a connection alive\n          keepalive: true,\n          keepaliveInterval: 60000 // ms\n        },\n    \n        // Enable auto reconnection\n        reconnect: {\n            auto: true,\n            delay: 5000, // ms\n            maxAttempts: 5,\n            onTimeout: false\n        }\n    };\n\n    useEffect(() => {\n        if (connectedAccountAddress) {\n            const provider = new EthersPolyjuiceWebsocketProvider({\n                rollupTypeHash: config.nervos.rollupTypeHash,\n                ethAccountLockCodeHash: config.nervos.ethAccountLockCodeHash,\n                web3Url: config.nervos.godwoken.rpcUrl\n            }, config.nervos.godwoken.wsUrl)\n            provider.on('block', () => console.log('block new'))\n            const ethers = provider as providers.WebSocketProvider\n            setEthers(ethers)\n        }\n    }, [connectedAccountAddress])\n\n    return ethers\n}","import ERC20_JSON from './abi/ERC20.json'\n\nimport { useEffect, useState } from 'react'\n\n\nimport Web3 from 'web3';\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\n\nexport const useERC20Contract = (erc20Address: string, web3: Web3 | null) => {\n    const [erc20, setERC20] = useState<Contract | null>()\n\n    useEffect(() => {\n        if (web3) {\n            const erc20 = new web3.eth.Contract(ERC20_JSON.abi as AbiItem[], erc20Address)\n\n            setERC20(erc20)\n\n            console.log('erc20 connected', erc20)\n        }\n    }, [erc20Address, web3])\n\n    return erc20\n}\n\nexport const listenBlocks = (web3: Web3 | null) => {\n    console.log('listen blocks')\n\n    if (web3) {\n        console.log('subscribe block')\n        web3.eth\n            .subscribe('newBlockHeaders', (error, result) => {\n                if (!error) {\n                    console.log(result)\n                }\n                console.error(error)\n            })\n            .on(\"connected\", function(subscriptionId){\n                console.log('connected', subscriptionId);\n            })\n            .on(\"data\", function(blockHeader){\n                console.log('block header', blockHeader);\n            })\n            .on(\"error\", console.error);\n    }\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}